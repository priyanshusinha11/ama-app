generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  channelId String?
  channel   Channel? @relation(fields: [channelId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  name                String?
  isAcceptingMessages Boolean   @default(true)
  username            String?   @unique
  Account             Account[]
  channels            Channel[]
  Like                Like[]
  messages            Message[]
  Session             Session[]
  Story               Story[]
}

model Channel {
  id        String    @id @default(cuid())
  name      String
  slug      String
  userId    String
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@unique([userId, slug])
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Like {
  id        String   @id
  storyId   String
  userId    String
  createdAt DateTime @default(now())
  Story     Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([storyId, userId])
  @@index([storyId])
  @@index([userId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Story {
  id        String   @id
  content   String
  createdAt DateTime @default(now())
  expiresAt DateTime
  authorId  String
  Like      Like[]
  User      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([expiresAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
